package ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import objects.RelationshipController;
import objects.User;
import objects.Visit;
import tables.UserPhotosTable;
import tables.UserTable;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;

/**
 * Visited view shows the users that have visited the active user
 */
public class VisitedView {
    private JButton backBttn;
    private JList visitedList;
    private JPanel basePane;
    private JButton nextVisitPageButton;
    private JButton prevVisitPageButton;
    private RelationshipController controller;
    private int offset;

    /**
     * Creates a visited view
     * @param c the relationship controller
     */
    public VisitedView(RelationshipController c) {
        controller = c;
        offset = 0;
        $$$setupUI$$$();
        backBttn.addActionListener(controller.backListener(controller));
        populateVisits(controller.getActiveUser());
        visitedList.setCellRenderer(new VisitListRenderer(controller));

        visitedList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                VisitedListObject visitListObject = (VisitedListObject) visitedList.getSelectedValue();
                if (visitListObject != null) {
                    controller.createVisit(UserTable.getUserObject(RelationshipController.getConnection(),
                            visitListObject.getName()), controller.getActiveUser());
                }
            }
        });

        nextVisitPageButton.addActionListener(e -> {
            offset += RelationshipController.OFFSET_COUNT;
            prevVisitPageButton.setVisible(true);
            populateVisits(controller.getActiveUser());
        });

        prevVisitPageButton.addActionListener(e -> {
            offset = Math.max(0, offset -= 100);
            if (offset == 0) {
                prevVisitPageButton.setVisible(false);
            }
            populateVisits(controller.getActiveUser());
        });
    }

    /**
     * Static method to create a visited view
     * @param c the relationship controller
     * @return the visited view JFrame
     */
    public static JFrame init(RelationshipController c) {
        JFrame frame = new JFrame("VisitedView");
        frame.setContentPane(new VisitedView(c).basePane);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setSize(700, 700);
        return frame;
    }

    /**
     * Populates visited list using current user
     * @param curUser the current user
     */
    public void populateVisits(User curUser) {
        ArrayList<Visit> results = controller.getVisitsForUser(curUser, offset);
        DefaultListModel m = new DefaultListModel();
        for (int i = 0; i < results.size(); i++) {
            m.addElement(new VisitedListObject(results.get(i)));
        }
        visitedList.setModel(m);
        if (m.size() < RelationshipController.OFFSET_COUNT) {
            nextVisitPageButton.setVisible(false);
        } else {
            nextVisitPageButton.setVisible(true);
        }
    }

    /**
     * Creates the previous and next buttons
     */
    private void createUIComponents() {
        prevVisitPageButton = new JButton();
        nextVisitPageButton = new JButton();
        prevVisitPageButton.setVisible(false);
        nextVisitPageButton.setVisible(false);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        basePane = new JPanel();
        basePane.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        basePane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setFont(new Font(label1.getFont().getName(), label1.getFont().getStyle(), 18));
        label1.setText("Who's Visited Me?");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        basePane.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel2.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        visitedList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        visitedList.setModel(defaultListModel1);
        scrollPane1.setViewportView(visitedList);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        basePane.add(panel3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        backBttn = new JButton();
        backBttn.setText("Back");
        panel3.add(backBttn, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel3.add(spacer1, new GridConstraints(0, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        nextVisitPageButton.setText("Next");
        panel3.add(nextVisitPageButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        prevVisitPageButton.setText("Prev");
        panel3.add(prevVisitPageButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return basePane;
    }

    /**
     * List object to display a visit
     */
    static class VisitedListObject {
        private ImageIcon icon;
        private Visit visit;

        /**
         * Creates visit list object using a given visit
         * @param v the visit
         */
        public VisitedListObject(Visit v) {
            visit = v;
            BufferedImage myPicture = null;
            try {
                Connection conn = RelationshipController.getConnection();
                ArrayList<String> images = UserPhotosTable.getUserPhotos(conn, UserTable.getUserObject(conn, v.getUsername()));
                if (images.size() == 0) {
                    myPicture = ImageIO.read(new File("resources/images/logo.png"));
                } else {

                    URL url = new URL(images.get(0));
                    myPicture = ImageIO.read(url);
                }


            } catch (IOException e) {
                e.printStackTrace();
            }
            //resize
            double factor = (double) 100 / (double) myPicture.getHeight();

            Image newimg = myPicture.getScaledInstance((int) (myPicture.getWidth() * factor), (int) (myPicture.getHeight() * factor), Image.SCALE_SMOOTH);
            //
            icon = new ImageIcon(newimg);
        }

        public ImageIcon getIcon() {
            return icon;
        }

        public String getName() {
            return visit.getUsername();
        }

        /**
         * gets formatted string to display in list
         * @return the printable string
         */
        public String getPrintableString() {
            long timestamp = visit.getTimestamp();
            Date myDate = new Date(timestamp);

            return myDate.toString() + " | " + getName();
        }
    }

    /**
     * Visit list renderer to render visit list objects
     */
    static class VisitListRenderer extends JLabel implements ListCellRenderer {
        private static final Color HIGHLIGHT_COLOR = new Color(88, 130, 255);

        /**
         * Creates a visit list renderer
         * @param controller the relationship controller
         */
        public VisitListRenderer(RelationshipController controller) {
            setOpaque(true);
            setIconTextGap(12);
        }

        /**
         * formats and returns the renderer for a given list object
         * @param list the list
         * @param value the object to be rendered
         * @param index objects index in the list
         * @param isSelected boolean representing whether the object is selected
         * @param cellHasFocus boolean representing whether the cell has focus
         * @return the formatted renderer
         */
        public Component getListCellRendererComponent(JList list, Object value,
                                                      int index, boolean isSelected, boolean cellHasFocus) {
            VisitedListObject entry = (VisitedListObject) value;
            setText(entry.getPrintableString());

            setIcon(entry.getIcon());
            if (isSelected) {
                setBackground(HIGHLIGHT_COLOR);
                setForeground(Color.white);
            } else {
                setBackground(Color.white);
                setForeground(Color.black);
            }
            return this;
        }
    }
}
